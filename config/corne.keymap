/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 36 37 38>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <39 40 41 0 1 2 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESC>;
            key-positions = <1 2>;
            layers = <0>;
            timeout-ms = <50>;
        };

        open-parenthesis {
            bindings = <&kp LPAR>;
            key-positions = <8 9>;
        };

        close-parenthesis {
            bindings = <&kp RPAR>;
            key-positions = <10 9>;
        };

        open-brackets {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <20 21>;
        };

        close-brackets {
            bindings = <&kp BSLH>;
            key-positions = <22 21>;
        };

        open-braces {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <32 33>;
        };

        close-braces {
            bindings = <&kp PIPE>;
            key-positions = <33 34>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <26 27>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <27 28>;
        };

        workspace_up {
            bindings = <&kp LG(PAGE_UP)>;
            key-positions = <3 4>;
        };

        workspace_down {
            bindings = <&kp LG(PAGE_DOWN)>;
            key-positions = <4 5>;
        };

        tab_previous {
            bindings = <&kp LC(PAGE_UP)>;
            key-positions = <15 16>;
        };

        tab_next {
            bindings = <&kp LC(PAGE_DOWN)>;
            key-positions = <16 17>;
        };

        workspace_shift_up {
            bindings = <&kp LG(LS(PAGE_UP))>;
            key-positions = <4 37 3>;
        };

        workspace_shift_down {
            bindings = <&kp LG(LS(PAGE_DOWN))>;
            key-positions = <37 4 5>;
        };

        tab_shift_previous {
            bindings = <&kp LC(LS(PAGE_UP))>;
            key-positions = <15 16 37>;
        };

        tab_shift_next {
            bindings = <&kp LC(LS(PAGE_DOWN))>;
            key-positions = <16 17 37>;
        };

        move-window-left {
            bindings = <&kp LG(LS(LEFT_ARROW))>;
            key-positions = <6 7>;
        };

        move-window-right {
            bindings = <&kp LS(LG(RIGHT_ARROW))>;
            key-positions = <7 8>;
        };

        back {
            bindings = <&kp LA(LEFT_ARROW)>;
            key-positions = <18 19>;
        };

        forward {
            bindings = <&kp LA(RIGHT_ARROW)>;
            key-positions = <19 20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&trans  &kp Q        &kp W        &kp E         &kp R         &kp T        &kp Y    &kp U            &kp I         &kp O        &kp P           &trans
&trans  &hml LGUI A  &hml LALT S  &hml LCTRL D  &hml LSHFT F  &kp G        &kp H    &hmr RSHFT J     &hmr RCTRL K  &hmr RALT L  &hmr RGUI SEMI  &trans
&trans  &kp Z        &kp X        &kp C         &kp V         &kp B        &kp N    &kp M            &kp COMMA     &kp DOT      &kp FSLH        &trans
                                  &kp LGUI      &lt 1 TAB     &kp SPACE    &kp RET  &lt 2 BACKSPACE  &kp DELETE
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp PLUS         &kp NUMBER_1        &kp NUMBER_2         &kp NUMBER_3         &kp ASTERISK    &kp EXCLAMATION   &kp AT_SIGN            &kp HASH             &kp DOLLAR  &kp PERCENT  &trans
&trans  &hml LGUI MINUS  &hml LALT NUMBER_4  &hml LCTRL NUMBER_5  &hml LSHFT NUMBER_6  &kp SLASH       &kp QUESTION      &hmr RSHIFT AMPERSAND  &hmr RCTRL ASTERISK  &trans      &trans       &trans
&trans  &kp NUMBER_0     &kp NUMBER_7        &kp NUMBER_8         &kp NUMBER_9         &kp EQUAL       &kp LEFT_BRACKET  &kp LEFT_BRACE         &kp CARET            &kp TILDE   &trans       &trans
                                             &trans               &trans               &kp SPACE       &kp RET           &trans                 &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &trans  &kp F1        &kp F2         &kp F3         &kp F10      &kp DOUBLE_QUOTES  &kp LC(SLASH)          &kp UP_ARROW           &kp LC(NON_US_BSLH)    &kp LC(LEFT_BRACKET)     &trans
&trans  &trans  &hml LALT F4  &hml LCTRL F5  &hml LSHFT F6  &kp F11      &kp SINGLE_QUOTE   &hmr RSHFT LEFT_ARROW  &hmr RCTRL DOWN_ARROW  &hmr RALT RIGHT_ARROW  &kp RS(LC(TILDE))        &trans
&trans  &trans  &kp F7        &kp F8         &kp F9         &kp F12      &kp HASH           &kp SLASH              &kp UNDER              &kp MINUS              &kp LS(LC(NON_US_BSLH))  &trans
                              &trans         &mo 3          &kp SPACE    &kp RET            &trans                 &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans    &kp PG_UP      &trans   &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp HOME  &kp PAGE_DOWN  &kp END  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans    &trans         &trans   &trans  &trans
                        &trans  &trans  &trans    &trans  &mo 2     &trans
            >;
        };
    };
};
